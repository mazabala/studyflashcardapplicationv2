import type { BorderType, ColorMode, ColorType, CornerRadiusType, DimensionType, FitTypes, FontSizeTags, FontWeights, ShadowType, ShapeType, SizeType, Spacing, TextAlignment } from "../types";
import type { PurchaseState } from "./state";
export interface Extra {
    [key: string]: any;
}
export type ComponentTypes = "stack" | "text" | "image" | "button" | "purchase_button" | "footer" | "package";
export interface PaywallComponent extends Extra {
    type: ComponentTypes;
    id: string;
    name: string;
}
export interface Text extends PaywallComponent {
}
export interface Stack extends PaywallComponent {
    spacing: number;
    components: PaywallComponent[];
}
export interface ComponentConfig {
    base: {
        stack: Stack;
        sticky_footer?: {
            stack: {
                type: "stack";
                components: PaywallComponent[];
            };
        } | null;
    };
}
export interface ComponentLocalizations extends Extra {
    en_US: {
        [key: string]: string;
    };
}
export interface PaywallData extends Extra {
    components_config: ComponentConfig;
    components_localizations: ComponentLocalizations;
    default_locale: string;
}
export interface ActionsProps {
    onAction?: (action: SupportedActions, data?: Extra) => void;
}
export interface PurchaseStateProps {
    purchaseState: PurchaseState;
}
interface SharedComponentProps extends PaywallComponent, ActionsProps, PurchaseStateProps {
    labels: ComponentLocalizations;
    id: string;
    colorMode: ColorMode;
    name: string;
}
interface Action {
    type: "restore_purchases" | "navigate_to" | "navigate_back" | "purchase" | "select_package";
}
export interface RestorePurchasesAction extends Action {
    type: "restore_purchases";
}
export interface NavigateBackAction extends Action {
    type: "navigate_back";
}
export interface NavigateToAction extends Action {
    type: "navigate_to";
    destination: "customer_center" | "privacy_policy" | "terms" | "url";
    url?: {
        url_lid: string;
        method: "in_app_browser" | "external_browser" | "deep_link";
    };
}
export interface PurchaseAction extends Action {
    type: "purchase";
}
export interface SelectPackageAction extends Action {
    type: "select_package";
}
export type SupportedActions = RestorePurchasesAction | NavigateBackAction | NavigateToAction | PurchaseAction | SelectPackageAction;
export interface ButtonNodeProps extends SharedComponentProps {
    type: "button";
    action: SupportedActions;
    stack: StackProps;
}
export interface PurchaseButtonProps extends SharedComponentProps {
    type: "purchase_button";
    stack: StackProps;
}
export interface FooterProps extends SharedComponentProps {
    type: "footer";
    stack: StackProps;
}
export interface PackageProps extends SharedComponentProps {
    type: "package";
    stack: StackProps;
    package_id: string;
    is_selected_by_default: boolean;
}
export interface StackProps extends SharedComponentProps {
    background_color?: ColorType;
    border?: BorderType;
    components: PaywallComponent[];
    dimension: DimensionType;
    margin: Spacing;
    padding: Spacing;
    shadow?: ShadowType;
    shape?: ShapeType;
    size: SizeType;
    spacing?: number;
    type: "stack";
}
export interface TextProps extends SharedComponentProps {
    background_color?: ColorType;
    color: ColorType;
    components: PaywallComponent[];
    font_name?: string;
    font_size: keyof typeof FontSizeTags;
    font_weight: keyof typeof FontWeights;
    horizontal_alignment: TextAlignment;
    margin: Spacing;
    padding: Spacing;
    text_lid: string;
    type: "text";
    size: SizeType;
}
type ImageSourceDictionaryType = Record<"original" | "heic" | "heic_low_res" | "webp" | "webp_low_res", string>;
type ImageSourceType = {
    light: ImageSourceDictionaryType;
    dark?: ImageSourceDictionaryType;
};
export interface ImageMaskShapeType {
    type: "circle" | "rectangle" | "concave" | "convex";
    corners?: CornerRadiusType;
}
export interface ImageProps extends SharedComponentProps {
    type: "image";
    fit_mode: FitTypes;
    size: SizeType;
    source: ImageSourceType;
    gradient_colors?: ColorType[];
    mask_shape?: ImageMaskShapeType;
    max_height?: number;
    override_source_lid?: string;
}
export {};
